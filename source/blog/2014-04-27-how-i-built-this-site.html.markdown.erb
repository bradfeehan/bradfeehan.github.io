---
title: How I Built This Site
---

I've had a few ideas for blog posts floating around in my head for a
while now. I finally decided to give them a home today. I wanted a site
with some information about me, some links to my projects, and links to
my other online profiles.

I wanted my first post on the website to be a retrospective on the
experience of building the website itself. So I'll go through the
process and what I was thinking for each step of this project.



Hosting
-------

The first thing to think about was where the website would be hosted.
A website is just an application running on a particular computer which
is connected to the internet. So the simplest option would be to run
that application on my laptop. But this isn't a good long-term option:
whenever my laptop is off, the website won't be available!

My friends and family might like to think I'm using a computer 24/7,
but there are rare occasions where I have to turn my computer off.
Whenever my laptop is off, visitors would see an error message instead
of my website.

![404](<%= p current_page.url %>/oops-google-chrome-could-not-connect-to-bradfeehan-com.png)

Running the website on my computer is actually useful, though. When I'm
thinking of making changes to the website, I can test them out on a
copy of the site running on my laptop before updating the real site.
This works well when I'm the only one accessing the site, but I have
bigger aspirations than that!

I probably have a spare computer somewhere, which could stay on all the
time and run my website 24/7. This would be an improvement, but my home
internet is only consumer-grade. TPG provide my connection, and while
it's been very reliable in my experience, their terms and conditions
don't instill much confidence in their reliability:

> 2.1. While we will endeavour to make broadband services available to
> customers 24 hours a day, 7 days a week, ADSL/ADSL2+ services are not
> fault free and we cannot guarantee uninterrupted service, or the
> speed, performance or quality of the service. There are many factors
> outside of our control which affect ADSL/ADSL2+ services, such as the
> performance of third party suppliers and equipment, Force Majeure
> events and performance of your telephone service. We accept no
> liability for interruptions to your ADSL service or for any resulting
> damage or loss suffered by you or any third party.

Also, ADSL has a lower upstream bandwidth than downstream. This means
that my website would perform slower than my typical web-browsing
experience at home.

I could pay somebody to connect a computer to the internet with a fast
connection, and take care of it while it runs my website. This is what
most websites on the internet would do. But for my purposes, there are
also free hosting options that are worthwhile considering.

[GitHub Pages] is a free way to host a simple static site, and since I
like GitHub I wanted to try their hosting out. But I was also hoping to
expand my knowledge about Ruby with this project as well.

[GitHub Pages]: <https://pages.github.com>



Framework
---------

At RubyConf AU in Sydney this February, [Ninefold] decided to sponsor
the event in a unique way. They volunteered their time to build
[The Hub], an event website for the conference. On the second day, one
of the Ninefold guys gave a 5-minute lightning talk on how they built
The Hub. They used [Middleman], a framework they'd developed
themselves.

[Ninefold]: <https://ninefold.com>
[The Hub]: <http://rubyconfau.multifaceted.io>
[Middleman]: <http://middlemanapp.com>

Middleman is a static site generator, which includes a lot of useful
tools for modern web development. I consider it somewhat of a
combination between [Jekyll] and [Rails]. Conveniently, it had a [blog
extension] as well, so I could host my writing.

[Jekyll]: <http://jekyllrb.com>
[Rails]: <http://rubyonrails.org>
[blog extension]: <http://middlemanapp.com/basics/blogging>

I wanted to learn more about Middleman, so I decided to use it for this
project.



Deployment
----------

I don't like manual processes, they're unreliable, slow, and boring.
That's why I like to automate as much as possible, investing this time
up-front to keep my future day-to-day work simple and convenient. I
want to push my code to GitHub with ease, and then somehow
automatically have it on the live site immediately.

I used [Travis CI] for this project. When I push new code to GitHub,
their servers notify Travis' servers, which queue a build request for
the new code. Once a Travis worker computer is available and I'm next
in line, it runs my build script.

[Travis CI]: <https://travis-ci.org/bradfeehan/bradfeehan.github.io>

I wrote this build script to delegate to Middleman's build process.
Middleman compiles all of my site into static content. The build script
then deletes all the source files, leaving only the build artifacts.
It then commits the result to the `master` branch, and pushes the
branch to GitHub.

GitHub Pages detect the new `master` commit once it gets pushed. At
that point, visitors to the site start to see the newly updated
content.



Design
------

I'm terrible at graphic design, so I decided to defer any decisions
about the design of the site as late as possible. [Zurb Foundation]
allows the site's layout to be responsive, but still lets the elements
be styled in greater detail later. Foundation's Sass RubyGem integrates
well with Middleman's build process as well.

[Zurb Foundation]: <http://foundation.zurb.com>



Content
-------

Now that the site is set up, I can start adding content. I've reduced
the time between me making a change, and that change being live, to
under five minutes (if I'm fast).

My next post will be about the sections of content I'll be adding, and
more of the purpose of the site.
